{"version":3,"sources":["toolkit/slice.js","toolkit/selector.js","components/UserSelector/index.jsx","util/data.js","util/fireBase.js","components/chatBox/index.jsx","components/mainPage/index.jsx","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["chatSlice","createSlice","name","initialState","selectUser","value","label","db","reducers","setStateData","state","action","payload","data","actions","chatRoom","options","UserSelector","dispatch","useDispatch","useSelector","selector","className","onChange","item","slice","isEmpty","length","isNotEmpty","getFireBaseDb","initializeApp","apiKey","authDomain","projectId","getFirestore","ChatBox","util","useState","hisMessage","setHisMessage","onSnapshot","doc","source","metadata","hasPendingWrites","console","log","useEffect","a","getDocs","collection","querySnapshot","tempMessageObject","forEach","push","id","user","message","e","getMessage","map","MainPage","chatText","setChatText","type","target","onClick","addDoc","timeStamp","Date","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","chatRoomReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.97a36f40.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chatSlice = createSlice({\r\n  name: \"chatRoom\",\r\n  initialState: {\r\n    selectUser: { value: \"Joanne\", label: \"Joanne\" },\r\n    db: null,\r\n  },\r\n  reducers: {\r\n    setStateData(state, action) {\r\n      state[action.payload.state] = action.payload.data;\r\n    },\r\n  },\r\n});\r\nexport const { setStateData } = chatSlice.actions;\r\nexport default chatSlice.reducer;\r\n","export const selectUser = (state) => state.chatRoom.selectUser;\r\nexport const db = (state) => state.chatRoom.db;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { slice, selector } from \"../../toolkit/\";\r\n\r\nconst options = [\r\n  { value: \"Joanne\", label: \"Joanne\" },\r\n  { value: \"Henry\", label: \"Henry\" },\r\n];\r\nfunction UserSelector() {\r\n  const dispatch = useDispatch();\r\n  const selectUser = useSelector(selector.selectUser);\r\n  const onChange = (item) => {\r\n    dispatch(slice.setStateData({ data: item, state: \"selectUser\" }));\r\n  };\r\n  return <Select className=\"name-select\" options={options} onChange={onChange} value={selectUser} />;\r\n}\r\nexport default UserSelector;\r\n","const isEmpty = (data) => {\r\n  if (data === \"\" || data.length === 0) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\nconst isNotEmpty = (data) => {\r\n  if (data !== \"\" || data.length !== 0) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\nexport { isEmpty, isNotEmpty };\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nexport const getFireBaseDb = () => {\r\n  initializeApp({\r\n    apiKey: \"### FIREBASE API KEY ###\",\r\n    authDomain: \"### FIREBASE AUTH DOMAIN ###\",\r\n    projectId: \"chatroom-1f890\",\r\n  });\r\n  const db = getFirestore();\r\n  return db;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { collection } from \"firebase/firestore\";\r\n// import { doc, onSnapshot } from \"firebase/firestore\";\r\nimport { getDocs } from \"firebase/firestore\";\r\nimport * as util from \"../../util\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selector } from \"../../toolkit\";\r\nimport { doc, onSnapshot } from \"firebase/firestore\";\r\n\r\nfunction ChatBox() {\r\n  const db = util.fireBase.getFireBaseDb();\r\n  const [hisMessage, setHisMessage] = useState([]);\r\n\r\n  const unsub = onSnapshot(doc(db, \"message\", \"message\"), (doc) => {\r\n    const source = doc.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n    console.log(source, \" data: \", doc.data());\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function getMessage() {\r\n      const querySnapshot = await getDocs(collection(db, \"message\"));\r\n      let tempMessageObject = [];\r\n      if (!util.data.isEmpty(querySnapshot)) {\r\n        try {\r\n          querySnapshot.forEach((doc) => {\r\n            tempMessageObject.push({ id: doc.id, user: doc.data().user, message: doc.data().message });\r\n          });\r\n        } catch (e) {\r\n          console.log(\"Error : \", e);\r\n        }\r\n      }\r\n      setHisMessage(tempMessageObject);\r\n    }\r\n    getMessage();\r\n  }, []);\r\n\r\n  // const unsub = onSnapshot(doc(db, \"message\", \"user\"), (doc) => {\r\n  //   const source = doc.metadata.hasPendingWrites ? \"Local\" : \"Server\";\r\n  //   console.log(source, \" data: \", doc.data());\r\n  // });\r\n  //   unsub();\r\n  return (\r\n    <>\r\n      <div>Chat Box</div>\r\n      {hisMessage.map((item) => {\r\n        return (\r\n          <div key={item.id}>\r\n            {item.user} : {item.message}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\nexport default ChatBox;\r\n","import React, { useEffect, useState } from \"react\";\r\n// import { initializeApp } from \"firebase/app\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selector } from \"../../toolkit\";\r\nimport UserSelector from \"../UserSelector\";\r\nimport ChatBox from \"../chatBox\";\r\nimport * as util from \"../../util\";\r\nfunction MainPage() {\r\n  const db = util.fireBase.getFireBaseDb();\r\n  const selectUser = useSelector(selector.selectUser);\r\n  const [chatText, setChatText] = useState(\"\");\r\n\r\n  const submitHandler = () => {\r\n    try {\r\n      const docRef = addDoc(collection(db, \"message\"), {\r\n        user: selectUser.value,\r\n        message: chatText,\r\n        timeStamp: new Date(),\r\n      });\r\n      // console.log(\"Document written with ID: \");\r\n      // console.log(\"Document written with ID: \", docRef.message);\r\n    } catch (e) {\r\n      console.error(\"Error adding document: \", e);\r\n    }\r\n    setChatText(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UserSelector />\r\n      <ChatBox />\r\n      <input type=\"text\" onChange={(e) => setChatText(e.target.value)} value={chatText} />\r\n      <button type=\"submit\" onClick={submitHandler}>\r\n        Submit\r\n      </button>\r\n    </>\r\n  );\r\n}\r\nexport default MainPage;\r\n","import \"./App.css\";\nimport MainPage from \"./components/mainPage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport chatRoomReducer from \"../toolkit/slice\";\r\n\r\nexport default configureStore({ reducer: { chatRoom: chatRoomReducer } });\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}